// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: node.proto

package node

import (
	context "context"
	message "github.com/chatpuppy/puppychat/grpc/pb/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	// Get all trusted nodes from network
	GetNodes(ctx context.Context, in *message.NodeRequest, opts ...grpc.CallOption) (*message.Response, error)
	// Register node to network
	Register(ctx context.Context, in *message.NodeRequest, opts ...grpc.CallOption) (*message.Response, error)
	// Sync messages
	Sync(ctx context.Context, opts ...grpc.CallOption) (Node_SyncClient, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) GetNodes(ctx context.Context, in *message.NodeRequest, opts ...grpc.CallOption) (*message.Response, error) {
	out := new(message.Response)
	err := c.cc.Invoke(ctx, "/node.Node/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Register(ctx context.Context, in *message.NodeRequest, opts ...grpc.CallOption) (*message.Response, error) {
	out := new(message.Response)
	err := c.cc.Invoke(ctx, "/node.Node/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Sync(ctx context.Context, opts ...grpc.CallOption) (Node_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[0], "/node.Node/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeSyncClient{stream}
	return x, nil
}

type Node_SyncClient interface {
	Send(*message.SyncRequest) error
	Recv() (*message.SyncResponse, error)
	grpc.ClientStream
}

type nodeSyncClient struct {
	grpc.ClientStream
}

func (x *nodeSyncClient) Send(m *message.SyncRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeSyncClient) Recv() (*message.SyncResponse, error) {
	m := new(message.SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	// Get all trusted nodes from network
	GetNodes(context.Context, *message.NodeRequest) (*message.Response, error)
	// Register node to network
	Register(context.Context, *message.NodeRequest) (*message.Response, error)
	// Sync messages
	Sync(Node_SyncServer) error
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) GetNodes(context.Context, *message.NodeRequest) (*message.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedNodeServer) Register(context.Context, *message.NodeRequest) (*message.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedNodeServer) Sync(Node_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Node/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetNodes(ctx, req.(*message.NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Node/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Register(ctx, req.(*message.NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).Sync(&nodeSyncServer{stream})
}

type Node_SyncServer interface {
	Send(*message.SyncResponse) error
	Recv() (*message.SyncRequest, error)
	grpc.ServerStream
}

type nodeSyncServer struct {
	grpc.ServerStream
}

func (x *nodeSyncServer) Send(m *message.SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeSyncServer) Recv() (*message.SyncRequest, error) {
	m := new(message.SyncRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodes",
			Handler:    _Node_GetNodes_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Node_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Node_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "node.proto",
}
