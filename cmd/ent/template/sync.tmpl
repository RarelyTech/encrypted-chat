{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "sync" }}

{{ template "header" $ }}

{{ template "import" $ }}

import (
    "context"
    "github.com/chatpuppy/puppychat/pkg/tea"
    "github.com/chatpuppy/puppychat/app/model"
    log "github.com/sirupsen/logrus"
)

{{ range $n := $.Nodes }}

type {{ $n.Name }}Sync struct {
    {{- if $n.HasOneFieldID }}
        ID {{ $n.ID.Type }} {{ with $n.Annotations.Fields.StructTag.id }}`{{ . }}`{{ else }}`{{ $n.ID.StructTag }}`{{ end }}
    {{- end }}
	{{- range $f := $n.Fields }}
		{{- $tag := $f.StructTag }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
		{{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}{{ template "model/omittags" $ }}{{ end }}
	{{- end }}
}

{{ $mutation := $n.MutationName }}
func (m *{{ $mutation }}) SyncData() (data *{{ $n.Name }}Sync) {
    ctx := context.Background()

    id, ok := m.ID()
    if !ok {
        log.Error("get {{ $n.Name }} sync data failed: id missing")
        return
    }

    if m.op.Is(OpDelete | OpDeleteOne) {
        data = &{{ $n.Name }}Sync { ID: id }
    } else {
        result, err := m.Client().{{ $n.Name }}.Get(ctx, id)
        if err != nil {
            log.Errorf("get {{ $n.Name }} sync data failed: %v", err)
            return
        }
        data = &{{ $n.Name }}Sync {
            ID: id,
        {{- range $f := $n.Fields }}
            {{ $f.StructField }}: result.{{ $f.StructField }},
        {{- end }}
        }
    }

    return data
}

func (m *{{ $mutation }}) SetSyncData(data *{{ $n.Name }}Sync) {
    {{- range $f := $n.Fields }}
    {{- $const := print $n.Package "." $f.Constant }}
        m.SetField({{ $const }}, data.{{ $f.StructField }})
    {{- end }}
}

func Save{{ $n.Name }}SyncData(ctx context.Context, b []byte, op Op, precall func(*{{ $n.Name }}Sync)) (err error) {
    data := new({{ $n.Name }}Sync)
    err = jsoniter.Unmarshal(b, data)
    if err != nil {
        return
    }

    id := data.ID
    if id == "" {
        err = model.ErrSyncIDNotFound
        return
    }

    if op.Is(OpDelete | OpDeleteOne) {
        err = Database.{{$n.Name}}.DeleteOneID(id).Exec(ctx)
    } else {
        creator := Database.{{$n.Name}}.Create().SetID(id)
        if precall != nil {
            precall(data)
        }
        creator.Mutation().SetSyncData(data)
        columns := []string{
            "id",
        {{- range $f := $n.Fields }}
        {{- $const := print $n.Package "." $f.Constant }}
        {{- if $f.Unique }}
            // {{ $const }},
        {{- end }}
        {{- end }}
        }
        err = creator.OnConflictColumns(columns...).UpdateNewValues().Exec(ctx)
    }

    return
}

{{ end }}
{{ end }}
