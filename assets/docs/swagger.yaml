basePath: /
definitions:
  app.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  model.ChatMessage:
    properties:
      content:
        description: encrypted message
        type: string
      createdAt:
        type: string
      groupId:
        type: string
      id:
        type: string
      memberId:
        type: string
      parentId:
        description: quote message id
        type: string
    required:
    - content
    - groupId
    - memberId
    type: object
  model.ChatMessageCreateRes:
    properties:
      createdAt:
        type: string
      id:
        type: string
    type: object
  model.GroupCreateReq:
    properties:
      category:
        description: group's category
        type: string
      intro:
        description: group intro
        type: string
      maxMembers:
        description: group's max members
        type: integer
      name:
        maxLength: 20
        minLength: 2
        type: string
      public:
        description: '`true` create public group, `false` create private group'
        type: boolean
      sharedPublic:
        description: Member's public key for `ecdh` exchange
        type: string
    required:
    - category
    - name
    - sharedPublic
    type: object
  model.GroupDetailWithPublicKey:
    properties:
      address:
        type: string
      category:
        type: string
      groupPublicKey:
        type: string
      id:
        type: string
      intro:
        description: optional
        type: string
      keyId:
        type: string
      membersCount:
        type: integer
      membersMax:
        type: integer
      name:
        type: string
      owner:
        description: group is belongs to current member
        type: boolean
      public:
        description: group is public or private
        type: boolean
    type: object
  model.GroupJoinReq:
    properties:
      groupId:
        type: string
      sharedPublic:
        description: Member's public key for `ecdh` exchange
        type: string
    required:
    - groupId
    - sharedPublic
    type: object
  model.GroupJoinedListRes:
    properties:
      address:
        type: string
      category:
        type: string
      id:
        type: string
      intro:
        description: optional
        type: string
      lastTime:
        type: string
      membersCount:
        type: integer
      membersMax:
        type: integer
      name:
        type: string
      unreadCount:
        type: integer
    type: object
  model.GroupKeyUsed:
    properties:
      groupId:
        type: string
      keyId:
        type: string
    required:
    - groupId
    - keyId
    type: object
  model.GroupKeyUsedReq:
    properties:
      keys:
        items:
          $ref: '#/definitions/model.GroupKeyUsed'
        minItems: 1
        type: array
    required:
    - keys
    type: object
  model.GroupListRes:
    properties:
      address:
        type: string
      category:
        type: string
      id:
        type: string
      intro:
        description: optional
        type: string
      joined:
        type: boolean
      membersCount:
        type: integer
      membersMax:
        type: integer
      name:
        type: string
    type: object
  model.GroupMetaRes:
    properties:
      address:
        type: string
      category:
        type: string
      id:
        type: string
      intro:
        description: optional
        type: string
      members:
        items:
          $ref: '#/definitions/model.Member'
        type: array
      membersCount:
        type: integer
      membersMax:
        type: integer
      name:
        type: string
      owner:
        description: group is belongs to current member
        type: boolean
      public:
        description: group is public or private
        type: boolean
    type: object
  model.GroupPublicKey:
    properties:
      groupPublicKey:
        type: string
      keyId:
        type: string
    type: object
  model.GroupShareKeyReq:
    properties:
      groupId:
        description: group id
        type: string
      sharedPublic:
        description: Member's public key for `ecdh` exchange
        type: string
    required:
    - groupId
    - sharedPublic
    type: object
  model.Member:
    properties:
      address:
        type: string
      avatar:
        type: string
      id:
        type: string
      nickname:
        type: string
    type: object
  model.MemberNonceRes:
    properties:
      nonce:
        type: string
    type: object
  model.MemberProfile:
    properties:
      address:
        type: string
      avatar:
        description: optional
        type: string
      id:
        type: string
      intro:
        description: optional
        type: string
      nickname:
        description: optional
        type: string
    type: object
  model.MemberSigninRes:
    properties:
      profile:
        allOf:
        - $ref: '#/definitions/model.MemberProfile'
      token:
        type: string
    type: object
  model.Message:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      member:
        allOf:
        - $ref: '#/definitions/model.Member'
      quote:
        allOf:
        - $ref: '#/definitions/model.Message'
    type: object
  model.Pagination:
    properties:
      current:
        type: integer
      pages:
        type: integer
      total:
        type: integer
    type: object
  model.PaginationRes:
    properties:
      items: {}
      pagination:
        allOf:
        - $ref: '#/definitions/model.Pagination'
    type: object
info:
  contact: {}
  description: |
    # ChatPuppy Api Document

    ## Auth
    - Add headers `Authorization Bearer {token}`
    - Add headers `X-Member-Address ${address}`

    ## Signature
    1. Just post request
    2. Encrypt raw post body string to `MD5`, getting string `bodyMD5`
    3. Concatenate `timestamp` (from 1970, 10 digits) string end of step 2, getting string `s = bodyMD5 + timestamp`
    4. Sign `s` getting `signature` string
    5. Add headers `X-Signature ${signature}`
    6. Add headers `X-Timestamp ${timestamp}`

    ## WebSocket
    > `/message`

    ### Operates
    - 1: register
    - 2: set group key
    - 3: new group message
  title: ChatPuppy Api Doc
  version: "1.0"
paths:
  /group:
    get:
      consumes:
      - application/json
      operationId: GroupList
      parameters:
      - description: group's category
        in: query
        name: category
        type: string
      - description: 'current page, start from 1 (default: 1)'
        in: query
        name: current
        type: integer
      - in: query
        name: name
        type: string
      - description: count peer page, default is 50
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/model.PaginationRes'
                  - properties:
                      items:
                        items:
                          $ref: '#/definitions/model.GroupListRes'
                        type: array
                    type: object
              type: object
      summary: Filter group
      tags:
      - Group
    post:
      consumes:
      - application/json
      description: create an group (need signature verify)
      operationId: GroupCreate
      parameters:
      - description: Group info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.GroupCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.GroupDetailWithPublicKey'
              type: object
      summary: Create group
      tags:
      - Group
  /group/{id}:
    get:
      consumes:
      - application/json
      operationId: GroupDetail
      parameters:
      - description: Group id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.GroupMetaRes'
              type: object
      summary: Detail info of group
      tags:
      - Group
  /group/categories:
    get:
      consumes:
      - application/json
      operationId: GroupCategories
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            $ref: '#/definitions/app.Response'
      summary: List all group categories
      tags:
      - Group
  /group/join:
    post:
      consumes:
      - application/json
      operationId: GroupJoin
      parameters:
      - description: Join info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.GroupJoinReq'
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.GroupDetailWithPublicKey'
              type: object
      summary: Join group
      tags:
      - Group
  /group/joined:
    get:
      consumes:
      - application/json
      operationId: GroupJoinedList
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            items:
              $ref: '#/definitions/model.GroupJoinedListRes'
            type: array
      summary: Joined group list
      tags:
      - Group
  /group/key:
    post:
      consumes:
      - application/json
      operationId: GroupShareKey
      parameters:
      - description: Group and key info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.GroupShareKeyReq'
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.GroupPublicKey'
              type: object
      summary: Share key with group
      tags:
      - Group
  /group/key/used:
    post:
      consumes:
      - application/json
      operationId: GroupKeyUsed
      parameters:
      - description: Group keys
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.GroupKeyUsedReq'
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            $ref: '#/definitions/app.Response'
      summary: Setting current key of group
      tags:
      - Group
  /member/{address}:
    get:
      consumes:
      - application/json
      description: Getting member's profile using address
      operationId: MemberProfile
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            $ref: '#/definitions/model.MemberProfile'
      summary: Member profile
      tags:
      - Member
  /member/nonce/{address}:
    get:
      consumes:
      - application/json
      description: Getting nonce string to be signed
      operationId: MemberNonce
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.MemberNonceRes'
              type: object
      summary: Member signin nonce
      tags:
      - Member
  /memeber:
    post:
      consumes:
      - application/json
      operationId: MemberSignin
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.MemberSigninRes'
              type: object
      summary: Member signin
      tags:
      - Member
  /message:
    get:
      consumes:
      - application/json
      operationId: MessageList
      parameters:
      - in: query
        name: groupId
        required: true
        type: string
      - description: last time
        in: query
        name: time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Message'
                  type: array
              type: object
      summary: List message
      tags:
      - Message
    post:
      consumes:
      - application/json
      operationId: MessageCreate
      parameters:
      - description: message detail
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.ChatMessage'
      produces:
      - application/json
      responses:
        "200":
          description: Response success
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.ChatMessageCreateRes'
              type: object
      summary: Create message
      tags:
      - Message
swagger: "2.0"
