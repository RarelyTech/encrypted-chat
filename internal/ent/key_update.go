// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chatpuppy/puppychat/internal/ent/group"
	"github.com/chatpuppy/puppychat/internal/ent/key"
	"github.com/chatpuppy/puppychat/internal/ent/member"
	"github.com/chatpuppy/puppychat/internal/ent/predicate"
)

// KeyUpdate is the builder for updating Key entities.
type KeyUpdate struct {
	config
	hooks     []Hook
	mutation  *KeyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the KeyUpdate builder.
func (ku *KeyUpdate) Where(ps ...predicate.Key) *KeyUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetUpdatedAt sets the "updated_at" field.
func (ku *KeyUpdate) SetUpdatedAt(t time.Time) *KeyUpdate {
	ku.mutation.SetUpdatedAt(t)
	return ku
}

// SetMemberID sets the "member_id" field.
func (ku *KeyUpdate) SetMemberID(s string) *KeyUpdate {
	ku.mutation.SetMemberID(s)
	return ku
}

// SetGroupID sets the "group_id" field.
func (ku *KeyUpdate) SetGroupID(s string) *KeyUpdate {
	ku.mutation.SetGroupID(s)
	return ku
}

// SetKeys sets the "keys" field.
func (ku *KeyUpdate) SetKeys(s string) *KeyUpdate {
	ku.mutation.SetKeys(s)
	return ku
}

// SetMember sets the "member" edge to the Member entity.
func (ku *KeyUpdate) SetMember(m *Member) *KeyUpdate {
	return ku.SetMemberID(m.ID)
}

// SetGroup sets the "group" edge to the Group entity.
func (ku *KeyUpdate) SetGroup(g *Group) *KeyUpdate {
	return ku.SetGroupID(g.ID)
}

// Mutation returns the KeyMutation object of the builder.
func (ku *KeyUpdate) Mutation() *KeyMutation {
	return ku.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (ku *KeyUpdate) ClearMember() *KeyUpdate {
	ku.mutation.ClearMember()
	return ku
}

// ClearGroup clears the "group" edge to the Group entity.
func (ku *KeyUpdate) ClearGroup() *KeyUpdate {
	ku.mutation.ClearGroup()
	return ku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KeyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ku.defaults(); err != nil {
		return 0, err
	}
	if len(ku.hooks) == 0 {
		if err = ku.check(); err != nil {
			return 0, err
		}
		affected, err = ku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ku.check(); err != nil {
				return 0, err
			}
			ku.mutation = mutation
			affected, err = ku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ku.hooks) - 1; i >= 0; i-- {
			if ku.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KeyUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KeyUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KeyUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ku *KeyUpdate) defaults() error {
	if _, ok := ku.mutation.UpdatedAt(); !ok {
		if key.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized key.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := key.UpdateDefaultUpdatedAt()
		ku.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ku *KeyUpdate) check() error {
	if _, ok := ku.mutation.MemberID(); ku.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Key.member"`)
	}
	if _, ok := ku.mutation.GroupID(); ku.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Key.group"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ku *KeyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *KeyUpdate {
	ku.modifiers = append(ku.modifiers, modifiers...)
	return ku
}

func (ku *KeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   key.Table,
			Columns: key.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: key.FieldID,
			},
		},
	}
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: key.FieldUpdatedAt,
		})
	}
	if value, ok := ku.mutation.Keys(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: key.FieldKeys,
		})
	}
	if ku.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.MemberTable,
			Columns: []string{key.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.MemberTable,
			Columns: []string{key.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ku.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.GroupTable,
			Columns: []string{key.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.GroupTable,
			Columns: []string{key.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = ku.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{key.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// KeyUpdateOne is the builder for updating a single Key entity.
type KeyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *KeyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (kuo *KeyUpdateOne) SetUpdatedAt(t time.Time) *KeyUpdateOne {
	kuo.mutation.SetUpdatedAt(t)
	return kuo
}

// SetMemberID sets the "member_id" field.
func (kuo *KeyUpdateOne) SetMemberID(s string) *KeyUpdateOne {
	kuo.mutation.SetMemberID(s)
	return kuo
}

// SetGroupID sets the "group_id" field.
func (kuo *KeyUpdateOne) SetGroupID(s string) *KeyUpdateOne {
	kuo.mutation.SetGroupID(s)
	return kuo
}

// SetKeys sets the "keys" field.
func (kuo *KeyUpdateOne) SetKeys(s string) *KeyUpdateOne {
	kuo.mutation.SetKeys(s)
	return kuo
}

// SetMember sets the "member" edge to the Member entity.
func (kuo *KeyUpdateOne) SetMember(m *Member) *KeyUpdateOne {
	return kuo.SetMemberID(m.ID)
}

// SetGroup sets the "group" edge to the Group entity.
func (kuo *KeyUpdateOne) SetGroup(g *Group) *KeyUpdateOne {
	return kuo.SetGroupID(g.ID)
}

// Mutation returns the KeyMutation object of the builder.
func (kuo *KeyUpdateOne) Mutation() *KeyMutation {
	return kuo.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (kuo *KeyUpdateOne) ClearMember() *KeyUpdateOne {
	kuo.mutation.ClearMember()
	return kuo
}

// ClearGroup clears the "group" edge to the Group entity.
func (kuo *KeyUpdateOne) ClearGroup() *KeyUpdateOne {
	kuo.mutation.ClearGroup()
	return kuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KeyUpdateOne) Select(field string, fields ...string) *KeyUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated Key entity.
func (kuo *KeyUpdateOne) Save(ctx context.Context) (*Key, error) {
	var (
		err  error
		node *Key
	)
	if err := kuo.defaults(); err != nil {
		return nil, err
	}
	if len(kuo.hooks) == 0 {
		if err = kuo.check(); err != nil {
			return nil, err
		}
		node, err = kuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kuo.check(); err != nil {
				return nil, err
			}
			kuo.mutation = mutation
			node, err = kuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kuo.hooks) - 1; i >= 0; i-- {
			if kuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, kuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Key)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KeyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KeyUpdateOne) SaveX(ctx context.Context) *Key {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KeyUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KeyUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kuo *KeyUpdateOne) defaults() error {
	if _, ok := kuo.mutation.UpdatedAt(); !ok {
		if key.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized key.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := key.UpdateDefaultUpdatedAt()
		kuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (kuo *KeyUpdateOne) check() error {
	if _, ok := kuo.mutation.MemberID(); kuo.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Key.member"`)
	}
	if _, ok := kuo.mutation.GroupID(); kuo.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Key.group"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (kuo *KeyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *KeyUpdateOne {
	kuo.modifiers = append(kuo.modifiers, modifiers...)
	return kuo
}

func (kuo *KeyUpdateOne) sqlSave(ctx context.Context) (_node *Key, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   key.Table,
			Columns: key.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: key.FieldID,
			},
		},
	}
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Key.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, key.FieldID)
		for _, f := range fields {
			if !key.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != key.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: key.FieldUpdatedAt,
		})
	}
	if value, ok := kuo.mutation.Keys(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: key.FieldKeys,
		})
	}
	if kuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.MemberTable,
			Columns: []string{key.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.MemberTable,
			Columns: []string{key.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.GroupTable,
			Columns: []string{key.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.GroupTable,
			Columns: []string{key.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = kuo.modifiers
	_node = &Key{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{key.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
