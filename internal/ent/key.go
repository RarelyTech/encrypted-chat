// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chatpuppy/puppychat/internal/ent/key"
)

// Key is the model entity for the Key schema.
type Key struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Keys holds the value of the "keys" field.
	Keys string `json:"keys,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Key) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case key.FieldID:
			values[i] = new(sql.NullInt64)
		case key.FieldKeys:
			values[i] = new(sql.NullString)
		case key.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Key", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Key fields.
func (k *Key) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case key.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			k.ID = uint64(value.Int64)
		case key.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				k.CreatedAt = value.Time
			}
		case key.FieldKeys:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keys", values[i])
			} else if value.Valid {
				k.Keys = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Key.
// Note that you need to call Key.Unwrap() before calling this method if this Key
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *Key) Update() *KeyUpdateOne {
	return (&KeyClient{config: k.config}).UpdateOne(k)
}

// Unwrap unwraps the Key entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (k *Key) Unwrap() *Key {
	_tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("ent: Key is not a transactional entity")
	}
	k.config.driver = _tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *Key) String() string {
	var builder strings.Builder
	builder.WriteString("Key(")
	builder.WriteString(fmt.Sprintf("id=%v, ", k.ID))
	builder.WriteString("created_at=")
	builder.WriteString(k.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("keys=")
	builder.WriteString(k.Keys)
	builder.WriteByte(')')
	return builder.String()
}

// Keys is a parsable slice of Key.
type Keys []*Key

func (k Keys) config(cfg config) {
	for _i := range k {
		k[_i].config = cfg
	}
}
