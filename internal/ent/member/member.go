// Code generated by ent, DO NOT EDIT.

package member

import (
	"time"
)

const (
	// Label holds the string label denoting the member type in the database.
	Label = "member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldIntro holds the string denoting the intro field in the database.
	FieldIntro = "intro"
	// FieldShowNickname holds the string denoting the show_nickname field in the database.
	FieldShowNickname = "show_nickname"
	// EdgeOwnGroups holds the string denoting the own_groups edge name in mutations.
	EdgeOwnGroups = "own_groups"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// Table holds the table name of the member in the database.
	Table = "member"
	// OwnGroupsTable is the table that holds the own_groups relation/edge.
	OwnGroupsTable = "group"
	// OwnGroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	OwnGroupsInverseTable = "group"
	// OwnGroupsColumn is the table column denoting the own_groups relation/edge.
	OwnGroupsColumn = "member_id"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "message"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "message"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "member_id"
	// GroupsTable is the table that holds the groups relation/edge. The primary key declared below.
	GroupsTable = "group_members"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "group"
)

// Columns holds all SQL columns for member fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldAddress,
	FieldNickname,
	FieldAvatar,
	FieldIntro,
	FieldShowNickname,
}

var (
	// GroupsPrimaryKey and GroupsColumn2 are the table columns denoting the
	// primary key for the groups relation (M2M).
	GroupsPrimaryKey = []string{"group_id", "member_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultShowNickname holds the default value on creation for the "show_nickname" field.
	DefaultShowNickname bool
)
