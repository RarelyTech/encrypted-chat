// Code generated by ent, DO NOT EDIT.

package messageread

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chatpuppy/puppychat/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberID), v))
	})
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupID), v))
	})
}

// LastID applies equality check predicate on the "last_id" field. It's identical to LastIDEQ.
func LastID(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastID), v))
	})
}

// LastTime applies equality check predicate on the "last_time" field. It's identical to LastTimeEQ.
func LastTime(v time.Time) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastTime), v))
	})
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberID), v))
	})
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemberID), v))
	})
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...string) predicate.MessageRead {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMemberID), v...))
	})
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...string) predicate.MessageRead {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMemberID), v...))
	})
}

// MemberIDGT applies the GT predicate on the "member_id" field.
func MemberIDGT(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemberID), v))
	})
}

// MemberIDGTE applies the GTE predicate on the "member_id" field.
func MemberIDGTE(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemberID), v))
	})
}

// MemberIDLT applies the LT predicate on the "member_id" field.
func MemberIDLT(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemberID), v))
	})
}

// MemberIDLTE applies the LTE predicate on the "member_id" field.
func MemberIDLTE(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemberID), v))
	})
}

// MemberIDContains applies the Contains predicate on the "member_id" field.
func MemberIDContains(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMemberID), v))
	})
}

// MemberIDHasPrefix applies the HasPrefix predicate on the "member_id" field.
func MemberIDHasPrefix(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMemberID), v))
	})
}

// MemberIDHasSuffix applies the HasSuffix predicate on the "member_id" field.
func MemberIDHasSuffix(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMemberID), v))
	})
}

// MemberIDEqualFold applies the EqualFold predicate on the "member_id" field.
func MemberIDEqualFold(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMemberID), v))
	})
}

// MemberIDContainsFold applies the ContainsFold predicate on the "member_id" field.
func MemberIDContainsFold(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMemberID), v))
	})
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupID), v))
	})
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupID), v))
	})
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...string) predicate.MessageRead {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGroupID), v...))
	})
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...string) predicate.MessageRead {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGroupID), v...))
	})
}

// GroupIDGT applies the GT predicate on the "group_id" field.
func GroupIDGT(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupID), v))
	})
}

// GroupIDGTE applies the GTE predicate on the "group_id" field.
func GroupIDGTE(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupID), v))
	})
}

// GroupIDLT applies the LT predicate on the "group_id" field.
func GroupIDLT(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupID), v))
	})
}

// GroupIDLTE applies the LTE predicate on the "group_id" field.
func GroupIDLTE(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupID), v))
	})
}

// GroupIDContains applies the Contains predicate on the "group_id" field.
func GroupIDContains(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupID), v))
	})
}

// GroupIDHasPrefix applies the HasPrefix predicate on the "group_id" field.
func GroupIDHasPrefix(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupID), v))
	})
}

// GroupIDHasSuffix applies the HasSuffix predicate on the "group_id" field.
func GroupIDHasSuffix(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupID), v))
	})
}

// GroupIDEqualFold applies the EqualFold predicate on the "group_id" field.
func GroupIDEqualFold(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupID), v))
	})
}

// GroupIDContainsFold applies the ContainsFold predicate on the "group_id" field.
func GroupIDContainsFold(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupID), v))
	})
}

// LastIDEQ applies the EQ predicate on the "last_id" field.
func LastIDEQ(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastID), v))
	})
}

// LastIDNEQ applies the NEQ predicate on the "last_id" field.
func LastIDNEQ(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastID), v))
	})
}

// LastIDIn applies the In predicate on the "last_id" field.
func LastIDIn(vs ...string) predicate.MessageRead {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastID), v...))
	})
}

// LastIDNotIn applies the NotIn predicate on the "last_id" field.
func LastIDNotIn(vs ...string) predicate.MessageRead {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastID), v...))
	})
}

// LastIDGT applies the GT predicate on the "last_id" field.
func LastIDGT(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastID), v))
	})
}

// LastIDGTE applies the GTE predicate on the "last_id" field.
func LastIDGTE(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastID), v))
	})
}

// LastIDLT applies the LT predicate on the "last_id" field.
func LastIDLT(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastID), v))
	})
}

// LastIDLTE applies the LTE predicate on the "last_id" field.
func LastIDLTE(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastID), v))
	})
}

// LastIDContains applies the Contains predicate on the "last_id" field.
func LastIDContains(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastID), v))
	})
}

// LastIDHasPrefix applies the HasPrefix predicate on the "last_id" field.
func LastIDHasPrefix(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastID), v))
	})
}

// LastIDHasSuffix applies the HasSuffix predicate on the "last_id" field.
func LastIDHasSuffix(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastID), v))
	})
}

// LastIDEqualFold applies the EqualFold predicate on the "last_id" field.
func LastIDEqualFold(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastID), v))
	})
}

// LastIDContainsFold applies the ContainsFold predicate on the "last_id" field.
func LastIDContainsFold(v string) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastID), v))
	})
}

// LastTimeEQ applies the EQ predicate on the "last_time" field.
func LastTimeEQ(v time.Time) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastTime), v))
	})
}

// LastTimeNEQ applies the NEQ predicate on the "last_time" field.
func LastTimeNEQ(v time.Time) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastTime), v))
	})
}

// LastTimeIn applies the In predicate on the "last_time" field.
func LastTimeIn(vs ...time.Time) predicate.MessageRead {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastTime), v...))
	})
}

// LastTimeNotIn applies the NotIn predicate on the "last_time" field.
func LastTimeNotIn(vs ...time.Time) predicate.MessageRead {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastTime), v...))
	})
}

// LastTimeGT applies the GT predicate on the "last_time" field.
func LastTimeGT(v time.Time) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastTime), v))
	})
}

// LastTimeGTE applies the GTE predicate on the "last_time" field.
func LastTimeGTE(v time.Time) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastTime), v))
	})
}

// LastTimeLT applies the LT predicate on the "last_time" field.
func LastTimeLT(v time.Time) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastTime), v))
	})
}

// LastTimeLTE applies the LTE predicate on the "last_time" field.
func LastTimeLTE(v time.Time) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastTime), v))
	})
}

// HasMember applies the HasEdge predicate on the "member" edge.
func HasMember() predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.Member) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MessageRead) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MessageRead) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MessageRead) predicate.MessageRead {
	return predicate.MessageRead(func(s *sql.Selector) {
		p(s.Not())
	})
}
