// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chatpuppy/puppychat/internal/ent/group"
	"github.com/chatpuppy/puppychat/internal/ent/key"
	"github.com/chatpuppy/puppychat/internal/ent/member"
)

// KeyCreate is the builder for creating a Key entity.
type KeyCreate struct {
	config
	mutation *KeyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (kc *KeyCreate) SetCreatedAt(t time.Time) *KeyCreate {
	kc.mutation.SetCreatedAt(t)
	return kc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kc *KeyCreate) SetNillableCreatedAt(t *time.Time) *KeyCreate {
	if t != nil {
		kc.SetCreatedAt(*t)
	}
	return kc
}

// SetUpdatedAt sets the "updated_at" field.
func (kc *KeyCreate) SetUpdatedAt(t time.Time) *KeyCreate {
	kc.mutation.SetUpdatedAt(t)
	return kc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kc *KeyCreate) SetNillableUpdatedAt(t *time.Time) *KeyCreate {
	if t != nil {
		kc.SetUpdatedAt(*t)
	}
	return kc
}

// SetMemberID sets the "member_id" field.
func (kc *KeyCreate) SetMemberID(s string) *KeyCreate {
	kc.mutation.SetMemberID(s)
	return kc
}

// SetGroupID sets the "group_id" field.
func (kc *KeyCreate) SetGroupID(s string) *KeyCreate {
	kc.mutation.SetGroupID(s)
	return kc
}

// SetKeys sets the "keys" field.
func (kc *KeyCreate) SetKeys(s string) *KeyCreate {
	kc.mutation.SetKeys(s)
	return kc
}

// SetID sets the "id" field.
func (kc *KeyCreate) SetID(s string) *KeyCreate {
	kc.mutation.SetID(s)
	return kc
}

// SetMember sets the "member" edge to the Member entity.
func (kc *KeyCreate) SetMember(m *Member) *KeyCreate {
	return kc.SetMemberID(m.ID)
}

// SetGroup sets the "group" edge to the Group entity.
func (kc *KeyCreate) SetGroup(g *Group) *KeyCreate {
	return kc.SetGroupID(g.ID)
}

// Mutation returns the KeyMutation object of the builder.
func (kc *KeyCreate) Mutation() *KeyMutation {
	return kc.mutation
}

// Save creates the Key in the database.
func (kc *KeyCreate) Save(ctx context.Context) (*Key, error) {
	var (
		err  error
		node *Key
	)
	if err := kc.defaults(); err != nil {
		return nil, err
	}
	if len(kc.hooks) == 0 {
		if err = kc.check(); err != nil {
			return nil, err
		}
		node, err = kc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kc.check(); err != nil {
				return nil, err
			}
			kc.mutation = mutation
			if node, err = kc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(kc.hooks) - 1; i >= 0; i-- {
			if kc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, kc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Key)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KeyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kc *KeyCreate) SaveX(ctx context.Context) *Key {
	v, err := kc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kc *KeyCreate) Exec(ctx context.Context) error {
	_, err := kc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kc *KeyCreate) ExecX(ctx context.Context) {
	if err := kc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kc *KeyCreate) defaults() error {
	if _, ok := kc.mutation.CreatedAt(); !ok {
		if key.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized key.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := key.DefaultCreatedAt()
		kc.mutation.SetCreatedAt(v)
	}
	if _, ok := kc.mutation.UpdatedAt(); !ok {
		if key.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized key.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := key.DefaultUpdatedAt()
		kc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (kc *KeyCreate) check() error {
	if _, ok := kc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Key.created_at"`)}
	}
	if _, ok := kc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Key.updated_at"`)}
	}
	if _, ok := kc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member_id", err: errors.New(`ent: missing required field "Key.member_id"`)}
	}
	if _, ok := kc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "Key.group_id"`)}
	}
	if _, ok := kc.mutation.Keys(); !ok {
		return &ValidationError{Name: "keys", err: errors.New(`ent: missing required field "Key.keys"`)}
	}
	if v, ok := kc.mutation.ID(); ok {
		if err := key.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Key.id": %w`, err)}
		}
	}
	if _, ok := kc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member", err: errors.New(`ent: missing required edge "Key.member"`)}
	}
	if _, ok := kc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "Key.group"`)}
	}
	return nil
}

func (kc *KeyCreate) sqlSave(ctx context.Context) (*Key, error) {
	_node, _spec := kc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Key.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (kc *KeyCreate) createSpec() (*Key, *sqlgraph.CreateSpec) {
	var (
		_node = &Key{config: kc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: key.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: key.FieldID,
			},
		}
	)
	_spec.OnConflict = kc.conflict
	if id, ok := kc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := kc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: key.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := kc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: key.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := kc.mutation.Keys(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: key.FieldKeys,
		})
		_node.Keys = value
	}
	if nodes := kc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.MemberTable,
			Columns: []string{key.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.GroupTable,
			Columns: []string{key.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Key.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kc *KeyCreate) OnConflict(opts ...sql.ConflictOption) *KeyUpsertOne {
	kc.conflict = opts
	return &KeyUpsertOne{
		create: kc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Key.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kc *KeyCreate) OnConflictColumns(columns ...string) *KeyUpsertOne {
	kc.conflict = append(kc.conflict, sql.ConflictColumns(columns...))
	return &KeyUpsertOne{
		create: kc,
	}
}

type (
	// KeyUpsertOne is the builder for "upsert"-ing
	//  one Key node.
	KeyUpsertOne struct {
		create *KeyCreate
	}

	// KeyUpsert is the "OnConflict" setter.
	KeyUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *KeyUpsert) SetCreatedAt(v time.Time) *KeyUpsert {
	u.Set(key.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KeyUpsert) UpdateCreatedAt() *KeyUpsert {
	u.SetExcluded(key.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KeyUpsert) SetUpdatedAt(v time.Time) *KeyUpsert {
	u.Set(key.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KeyUpsert) UpdateUpdatedAt() *KeyUpsert {
	u.SetExcluded(key.FieldUpdatedAt)
	return u
}

// SetMemberID sets the "member_id" field.
func (u *KeyUpsert) SetMemberID(v string) *KeyUpsert {
	u.Set(key.FieldMemberID, v)
	return u
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *KeyUpsert) UpdateMemberID() *KeyUpsert {
	u.SetExcluded(key.FieldMemberID)
	return u
}

// SetGroupID sets the "group_id" field.
func (u *KeyUpsert) SetGroupID(v string) *KeyUpsert {
	u.Set(key.FieldGroupID, v)
	return u
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *KeyUpsert) UpdateGroupID() *KeyUpsert {
	u.SetExcluded(key.FieldGroupID)
	return u
}

// SetKeys sets the "keys" field.
func (u *KeyUpsert) SetKeys(v string) *KeyUpsert {
	u.Set(key.FieldKeys, v)
	return u
}

// UpdateKeys sets the "keys" field to the value that was provided on create.
func (u *KeyUpsert) UpdateKeys() *KeyUpsert {
	u.SetExcluded(key.FieldKeys)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Key.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(key.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeyUpsertOne) UpdateNewValues() *KeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(key.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(key.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Key.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *KeyUpsertOne) Ignore() *KeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeyUpsertOne) DoNothing() *KeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeyCreate.OnConflict
// documentation for more info.
func (u *KeyUpsertOne) Update(set func(*KeyUpsert)) *KeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *KeyUpsertOne) SetCreatedAt(v time.Time) *KeyUpsertOne {
	return u.Update(func(s *KeyUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KeyUpsertOne) UpdateCreatedAt() *KeyUpsertOne {
	return u.Update(func(s *KeyUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KeyUpsertOne) SetUpdatedAt(v time.Time) *KeyUpsertOne {
	return u.Update(func(s *KeyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KeyUpsertOne) UpdateUpdatedAt() *KeyUpsertOne {
	return u.Update(func(s *KeyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetMemberID sets the "member_id" field.
func (u *KeyUpsertOne) SetMemberID(v string) *KeyUpsertOne {
	return u.Update(func(s *KeyUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *KeyUpsertOne) UpdateMemberID() *KeyUpsertOne {
	return u.Update(func(s *KeyUpsert) {
		s.UpdateMemberID()
	})
}

// SetGroupID sets the "group_id" field.
func (u *KeyUpsertOne) SetGroupID(v string) *KeyUpsertOne {
	return u.Update(func(s *KeyUpsert) {
		s.SetGroupID(v)
	})
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *KeyUpsertOne) UpdateGroupID() *KeyUpsertOne {
	return u.Update(func(s *KeyUpsert) {
		s.UpdateGroupID()
	})
}

// SetKeys sets the "keys" field.
func (u *KeyUpsertOne) SetKeys(v string) *KeyUpsertOne {
	return u.Update(func(s *KeyUpsert) {
		s.SetKeys(v)
	})
}

// UpdateKeys sets the "keys" field to the value that was provided on create.
func (u *KeyUpsertOne) UpdateKeys() *KeyUpsertOne {
	return u.Update(func(s *KeyUpsert) {
		s.UpdateKeys()
	})
}

// Exec executes the query.
func (u *KeyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KeyUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: KeyUpsertOne.ID is not supported by MySQL driver. Use KeyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KeyUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KeyCreateBulk is the builder for creating many Key entities in bulk.
type KeyCreateBulk struct {
	config
	builders []*KeyCreate
	conflict []sql.ConflictOption
}

// Save creates the Key entities in the database.
func (kcb *KeyCreateBulk) Save(ctx context.Context) ([]*Key, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kcb.builders))
	nodes := make([]*Key, len(kcb.builders))
	mutators := make([]Mutator, len(kcb.builders))
	for i := range kcb.builders {
		func(i int, root context.Context) {
			builder := kcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcb *KeyCreateBulk) SaveX(ctx context.Context) []*Key {
	v, err := kcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kcb *KeyCreateBulk) Exec(ctx context.Context) error {
	_, err := kcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcb *KeyCreateBulk) ExecX(ctx context.Context) {
	if err := kcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Key.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kcb *KeyCreateBulk) OnConflict(opts ...sql.ConflictOption) *KeyUpsertBulk {
	kcb.conflict = opts
	return &KeyUpsertBulk{
		create: kcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Key.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kcb *KeyCreateBulk) OnConflictColumns(columns ...string) *KeyUpsertBulk {
	kcb.conflict = append(kcb.conflict, sql.ConflictColumns(columns...))
	return &KeyUpsertBulk{
		create: kcb,
	}
}

// KeyUpsertBulk is the builder for "upsert"-ing
// a bulk of Key nodes.
type KeyUpsertBulk struct {
	create *KeyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Key.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(key.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeyUpsertBulk) UpdateNewValues() *KeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(key.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(key.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Key.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *KeyUpsertBulk) Ignore() *KeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeyUpsertBulk) DoNothing() *KeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeyCreateBulk.OnConflict
// documentation for more info.
func (u *KeyUpsertBulk) Update(set func(*KeyUpsert)) *KeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *KeyUpsertBulk) SetCreatedAt(v time.Time) *KeyUpsertBulk {
	return u.Update(func(s *KeyUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KeyUpsertBulk) UpdateCreatedAt() *KeyUpsertBulk {
	return u.Update(func(s *KeyUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KeyUpsertBulk) SetUpdatedAt(v time.Time) *KeyUpsertBulk {
	return u.Update(func(s *KeyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KeyUpsertBulk) UpdateUpdatedAt() *KeyUpsertBulk {
	return u.Update(func(s *KeyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetMemberID sets the "member_id" field.
func (u *KeyUpsertBulk) SetMemberID(v string) *KeyUpsertBulk {
	return u.Update(func(s *KeyUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *KeyUpsertBulk) UpdateMemberID() *KeyUpsertBulk {
	return u.Update(func(s *KeyUpsert) {
		s.UpdateMemberID()
	})
}

// SetGroupID sets the "group_id" field.
func (u *KeyUpsertBulk) SetGroupID(v string) *KeyUpsertBulk {
	return u.Update(func(s *KeyUpsert) {
		s.SetGroupID(v)
	})
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *KeyUpsertBulk) UpdateGroupID() *KeyUpsertBulk {
	return u.Update(func(s *KeyUpsert) {
		s.UpdateGroupID()
	})
}

// SetKeys sets the "keys" field.
func (u *KeyUpsertBulk) SetKeys(v string) *KeyUpsertBulk {
	return u.Update(func(s *KeyUpsert) {
		s.SetKeys(v)
	})
}

// UpdateKeys sets the "keys" field to the value that was provided on create.
func (u *KeyUpsertBulk) UpdateKeys() *KeyUpsertBulk {
	return u.Update(func(s *KeyUpsert) {
		s.UpdateKeys()
	})
}

// Exec executes the query.
func (u *KeyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KeyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
